(define! quote (vau (x) _ x))
(defsyntax! #'` (x) (quote x))
(define! ignore (vau (_) _ ()))

(defsyntax! ^rem 'ignore)
(rem This is the prelude for vau)

(rem TODO: this should be checked inside a quasi-quote macro instead of being defined here)
(define! unquote! (vau (x) env (evau x env)))

(rem Define the . prefix as a quick accessor to underlying platform objects)
(defsyntax! #.` (x) (platform-object x))

(rem Operations to get the environment)
(define! get-current-environment (vau () env env))
(define! empty-environment (.Env))

(rem Define some non-prefixed Clojure-like symbols)
(rem TODO: doesn't work because it runs in an inner environment which is promptly thrown away ($define! ^def $define!))
(defsyntax! ^fn 'lambda)

(rem TODO: dicts should be functions of their keys)
