(:: quote (vau (x) _ x))
(syntax:: #'` (x) (quote x))
(:: ignore (vau (_) _ ()))

(syntax:: ^rem 'ignore)
(rem This is the prelude for vau)

(rem Define the . prefix as a quick accessor to underlying platform objects)
(syntax:: #.` (x) (python-object x))

(rem Operations to get the environment)
(:: get-current-environment (vau () env env))
(:: empty-environment (.Env))

(:: fn (vau (args body) %
    (wrap (evau (list vau args (quote _) body) %))))

(rem NOTE: Breckin started to achieve lisp enlightenment after getting defun to work)
(:: fn:: (vau (name args body) %
    (evau (list (quote ::) name (list (quote fn) args body)) %)))

(rem === Bring in builtins and primitives from the platform ===)
(:: python-getattr (raw-wrap .getattr))
(:: python-__import__ (raw-wrap .__import__))
(:: python-importlib (python-__import__ "importlib"))
(:: python-import-module (raw-wrap (python-getattr python-importlib "import_module")))

(rem === The REPL ===)
(present "lisp::Ï› - type (.exit) or Ctrl-D to exit")
((raw-wrap (python-getattr (python-import-module "vau_python.repl") "start_repl")))
